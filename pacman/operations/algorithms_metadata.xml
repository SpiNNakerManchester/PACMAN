<!--
# Copyright (c) 2017-2019 The University of Manchester
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
 -->
<algorithms xmlns="https://github.com/SpiNNakerManchester/PACMAN"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://github.com/SpiNNakerManchester/PACMAN
            https://raw.githubusercontent.com/SpiNNakerManchester/PACMAN/master/pacman/operations/algorithms_metadata_schema.xsd">
    <algorithm name="FixedRouteRouter">
        <python_module>pacman.operations.fixed_route_router.fixed_route_router</python_module>
        <python_class>FixedRouteRouter</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
            <parameter>
                <param_name>destination_class</param_name>
                <param_type>FixedRouteDestinationClass</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>placements</param_name>
            <param_name>machine</param_name>
            <param_name>destination_class</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryFixedRoutes</param_type>
        </outputs>
    </algorithm>
    <algorithm name="SplitterPartitioner">
        <python_module>pacman.operations.partition_algorithms.splitter_partitioner</python_module>
        <python_class>SplitterPartitioner</python_class>
        <input_definitions>
            <parameter>
                <param_name>app_graph</param_name>
                <param_type>MemoryApplicationGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryVirtualMachine</param_type>
                <param_type>MemoryMachine</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_time_steps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
            <parameter>
                <param_name>pre_allocated_resources</param_name>
                <param_type>MemoryPreAllocatedResources</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>app_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_time_steps</param_name>
            <token>SplitterObjectsAllocated</token>
        </required_inputs>
        <optional_inputs>
            <token>GeneratedPreAllocatedResources</token>
            <param_name>pre_allocated_resources</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryMachineGraph</param_type>
            <param_type>NChipsRequired</param_type>
            <token>PartitioningDone</token>
        </outputs>
    </algorithm>
    <algorithm name="RadialPlacer">
        <python_module>pacman.operations.placer_algorithms.radial_placer</python_module>
        <python_class>RadialPlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="OneToOnePlacer">
        <python_module>pacman.operations.placer_algorithms.one_to_one_placer</python_module>
        <python_class>OneToOnePlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="SpreaderPlacer">
        <python_module>pacman.operations.placer_algorithms.spreader_placer</python_module>
        <python_class>SpreaderPlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachinePartitionNKeysMap</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>n_keys_map</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="ConnectiveBasedPlacer">
        <python_module>pacman.operations.placer_algorithms.connective_based_placer</python_module>
        <python_class>ConnectiveBasedPlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
             <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
       </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="HilbertPlacer">
        <python_module>pacman.operations.rigged_algorithms.hilbert_placer</python_module>
        <python_class>HilbertPlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="RandomPlacer">
        <python_module>pacman.operations.rigged_algorithms.random_placer</python_module>
        <python_class>RandomPlacer</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryPlacements</param_type>
        </outputs>
    </algorithm>
    <algorithm name="IsomorphicChecker">
        <python_module>pacman.operations.rigged_algorithms.isomorph_check</python_module>
        <python_class>IsomorphicChecker</python_class>
        <input_definitions>
            <parameter>
                <param_name>report_folder</param_name>
                <param_type>ReportFolder</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
            <parameter>
                <param_name>placements_copy</param_name>
                <param_type>MemoryPlacements2</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>report_folder</param_name>
            <param_name>placements</param_name>
            <param_name>placements_copy</param_name>
        </required_inputs>
        <outputs>
        </outputs>
    </algorithm>
    <algorithm name="BasicDijkstraRouting">
        <python_module>pacman.operations.router_algorithms.basic_dijkstra_routing</python_module>
        <python_class>BasicDijkstraRouting</python_class>
        <input_definitions>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>placements</param_name>
            <param_name>machine</param_name>
            <param_name>machine_graph</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingTableByPartition</param_type>
        </outputs>
    </algorithm>
    <algorithm name="BasicRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.basic_routing_info_allocator</python_module>
        <python_class>BasicRoutingInfoAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachinePartitionNKeysMap</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
            <param_name>placements</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
        </outputs>
    </algorithm>
    <algorithm name="ZonedRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.zoned_routing_info_allocator</python_module>
        <python_function>flexible_allocate</python_function>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachinePartitionNKeysMap</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
        </outputs>
    </algorithm>
    <algorithm name="GlobalZonedRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.global_zoned_routing_info_allocator</python_module>
        <python_function>global_allocate</python_function>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachinePartitionNKeysMap</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
        </outputs>
    </algorithm>
    <algorithm name="DestinationBasedRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.destination_based_key_allocator</python_module>
        <python_class>DestinationBasedRoutingInfoAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachineEdgeNKeysMap</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
            <param_name>placements</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
            <param_type>MemoryRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="MallocBasedRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.malloc_based_routing_allocator.malloc_based_routing_info_allocator</python_module>
        <python_class>MallocBasedRoutingInfoAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachinePartitionNKeysMap</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
        </outputs>
    </algorithm>
    <algorithm name="CompressibleMallocBasedRoutingInfoAllocator">
        <python_module>pacman.operations.routing_info_allocator_algorithms.malloc_based_routing_allocator.compressible_malloc_based_routing_info_allocator</python_module>
        <python_class>CompressibleMallocBasedRoutingInfoAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>n_keys_map</param_name>
                <param_type>MemoryMachineEdgeNKeysMap</param_type>
            </parameter>
            <parameter>
                <param_name>routing_tables</param_name>
                <param_type>MemoryRoutingTableByPartition</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>n_keys_map</param_name>
            <param_name>routing_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingInfos</param_type>
        </outputs>
    </algorithm>
    <algorithm name="BasicRoutingTableGenerator">
        <python_module>pacman.operations.routing_table_generators.basic_routing_table_generator</python_module>
        <python_class>BasicRoutingTableGenerator</python_class>
        <input_definitions>
            <parameter>
                <param_name>routing_infos</param_name>
                <param_type>MemoryRoutingInfos</param_type>
            </parameter>
            <parameter>
                <param_name>routing_table_by_partitions</param_name>
                <param_type>MemoryRoutingTableByPartition</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>routing_infos</param_name>
            <param_name>routing_table_by_partitions</param_name>
            <param_name>machine</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryRoutingTables</param_type>
            <token part="UnCompressedRoutingTablesGenerated">RoutingTablesGenerated</token>
        </outputs>
    </algorithm>
    <algorithm name="OrderedCoveringCompressor">
        <python_module>pacman.operations.router_compressors.ordered_covering_router_compressor.ordered_covering_compressor</python_module>
        <python_class>OrderedCoveringCompressor</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
            <parameter>
                <param_name>target_length</param_name>
                <param_type>CompressionTargetSize</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <token>RoutingTablesPreCompressed</token>
            <param_name>target_length</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="MundyRouterCompressor">
        <!-- DEPRECATED Use OrderedCoveringRouterCompressor !-->
        <python_module>pacman.operations.router_compressors.ordered_covering_router_compressor.ordered_covering_compressor</python_module>
        <python_class>MundyRouterCompressor</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
            <parameter>
                <param_name>target_length</param_name>
                <param_type>CompressionTargetSize</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <token>RoutingTablesPreCompressed</token>
            <param_name>target_length</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="PairUnorderedCompressor">
        <python_module>pacman.operations.router_compressors.checked_unordered_pair_compressor</python_module>
        <python_class>CheckedUnorderedPairCompressor</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
            <parameter>
                <param_name>target_length</param_name>
                <param_type>CompressionTargetSize</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <param_name>target_length</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="PairCompressor">
        <python_module>pacman.operations.router_compressors.pair_compressor</python_module>
        <python_class>PairCompressor</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
            <parameter>
                <param_name>target_length</param_name>
                <param_type>CompressionTargetSize</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <param_name>target_length</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
            <token part="CompressedRoutingTablesGenerated">RoutingTablesGenerated</token>
        </outputs>
    </algorithm>
    <algorithm name="RoutingCompressionChecker">
        <python_module>pacman.operations.router_compressors.routing_compression_checker</python_module>
        <python_function>generate_routing_compression_checker_report</python_function>
        <input_definitions>
            <parameter>
                <param_name>report_folder</param_name>
                <param_type>ReportFolder</param_type>
            </parameter>
            <parameter>
                <param_name>compressed_routing_tables</param_name>
                <param_type>MemoryCompressedRoutingTables</param_type>
            </parameter>
            <parameter>
                <param_name>routing_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>report_folder</param_name>
            <param_name>compressed_routing_tables</param_name>
            <param_name>routing_tables</param_name>
        </required_inputs>
    </algorithm>
    <algorithm name="BasicRouteMerger">
        <python_module>pacman.operations.router_compressors.basic_route_merger</python_module>
        <python_class>BasicRouteMerger</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <token>RoutingTablesPreCompressed</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="MallocBasedRouteMerger">
        <python_module>pacman.operations.router_compressors.malloc_based_route_merger</python_module>
        <python_class>MallocBasedRouteMerger</python_class>
        <input_definitions>
            <parameter>
                <param_name>router_tables</param_name>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>router_tables</param_name>
        </required_inputs>
        <optional_inputs>
            <token>RoutingTablesPreCompressed</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryCompressedRoutingTables</param_type>
        </outputs>
    </algorithm>
    <algorithm name="MallocBasedChipIDAllocator">
        <python_module>pacman.operations.chip_id_allocator_algorithms.malloc_based_chip_id_allocator</python_module>
        <python_class>MallocBasedChipIdAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryMachine</param_type>
            </parameter>
            <parameter>
                <param_name>graph</param_name>
                <param_type>MemoryApplicationGraph</param_type>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine</param_name>
            <param_name>graph</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryExtendedMachine</param_type>
        </outputs>
    </algorithm>
    <algorithm name="VirtualMallocBasedChipIDAllocator">
        <python_module>pacman.operations.chip_id_allocator_algorithms.malloc_based_chip_id_allocator</python_module>
        <python_class>MallocBasedChipIdAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryVirtualMachine</param_type>
            </parameter>
            <parameter>
                <param_name>graph</param_name>
                <param_type>MemoryApplicationGraph</param_type>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine</param_name>
        </required_inputs>
        <optional_inputs>
            <param_name>graph</param_name>
        </optional_inputs>
        <outputs>
            <param_type>MemoryExtendedVirtualMachine</param_type>
        </outputs>
    </algorithm>
    <algorithm name="BasicTagAllocator">
        <python_module>pacman.operations.tag_allocator_algorithms.basic_tag_allocator</python_module>
        <python_class>BasicTagAllocator</python_class>
        <input_definitions>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
             <parameter>
                <param_name>plan_n_timesteps</param_name>
                <param_type>PlanNTimeSteps</param_type>
            </parameter>
       </input_definitions>
        <required_inputs>
            <param_name>placements</param_name>
            <param_name>machine</param_name>
            <param_name>plan_n_timesteps</param_name>
         </required_inputs>
        <outputs>
            <param_type>MemoryIpTags</param_type>
            <param_type>MemoryReverseIpTags</param_type>
            <param_type>MemoryTags</param_type>
        </outputs>
    </algorithm>
    <algorithm name="ValidRoutesChecker">
        <python_module>pacman.operations.multi_cast_router_check_functionality.valid_routes_checker</python_module>
        <python_function>validate_routes</python_function>
        <input_definitions>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>routing_infos</param_name>
                <param_type>MemoryRoutingInfos</param_type>
            </parameter>
            <parameter>
                <param_name>routing_tables</param_name>
                <param_type>MemoryCompressedRoutingTables</param_type>
                <param_type>MemoryRoutingTables</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>placements</param_name>
            <param_name>machine</param_name>
            <param_name>machine_graph</param_name>
            <param_name>routing_infos</param_name>
            <param_name>routing_tables</param_name>
        </required_inputs>
    </algorithm>
    <algorithm name="NerRoute">
        <python_module>pacman.operations.router_algorithms</python_module>
        <python_class>NerRoute</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>placements</param_name>
        </required_inputs>
        <optional_inputs>
            <token>EdgesFiltered</token>
        </optional_inputs>
        <outputs>
            <param_type>MemoryRoutingTableByPartition</param_type>
        </outputs>
    </algorithm>
    <algorithm name="NerRouteTrafficAware">
        <python_module>pacman.operations.router_algorithms</python_module>
        <python_class>NerRouteTrafficAware</python_class>
        <input_definitions>
            <parameter>
                <param_name>machine_graph</param_name>
                <param_type>MemoryMachineGraph</param_type>
            </parameter>
            <parameter>
                <param_name>machine</param_name>
                <param_type>MemoryExtendedMachine</param_type>
            </parameter>
            <parameter>
                <param_name>placements</param_name>
                <param_type>MemoryPlacements</param_type>
            </parameter>
        </input_definitions>
        <required_inputs>
            <param_name>machine_graph</param_name>
            <param_name>machine</param_name>
            <param_name>placements</param_name>
        </required_inputs>
        <outputs>
            <param_type>MemoryRoutingTableByPartition</param_type>
        </outputs>
    </algorithm>
</algorithms>